<h2>Memory Operator</h2>
<p>
    This operator maintains a 'memory' of solutions and 
    ensures that the best solution in that memory is included in the GA population if 
    it is better than the best in the population. The memory is kept up to date with
    good solutions during the GA run.
</p>
<p>
    In an intelligent radio system, a GA is used to search for and track a radio signal that is 
    jumping around the radio spectrum (channel hopping). A GA without the memory operator needs
    to re-converge on the new frequency for each channel hop of the radio transmitter.
    Adding the memory operator tries to ensure that if a channel is reused 
    the solution representing that channel will be found in memory and added to the population. 
    This will cause the GA to instantly converge on the new frequency. If the current channel hasn't 
    been used before, the GA will try and converge in the normal manner.
</p>
<p>
    If the GA landscape is constantly changing such that the GA has to 
    re-converge on a new solution, the memory operator could be used to improve 
    its performance. As with all of these things experimentation will determine
    the best usage.
</p>

<p>
    The following code adds the memory operator to the GA, sets the memory capacity 
    to 100 'memories' and specifies that the memory will be updated every 10 
    generations. The code may be more easily understood if read in conjunction 
    with articles <a gref="/blog/gaf-part-2/">GAF Part 2</a> and 
    <a href="/blog/gaf-part-3/">GAF Part 3</a>
</p>
<pre><code>var memory = new Memory(100, 10);
ga.Operators.Add(memory);</code></pre>

<a href="/gaf/section/407" class="btn-u pull-right">Next ></a>

<script>

$(document).ready(function() {
  $('pre code').each(function(i, block) {
    hljs.highlightBlock(block);
  });
});

</script>