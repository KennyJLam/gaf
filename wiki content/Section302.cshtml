<h2>Terminate Function</h2>
<p>
    Stopping the genetic algorithm, hopefully once it has a suitable solution 
    to the problem, is carried out by the Terminate function. This function is 
    provided by the developer and passed to the GAF as a delegate at which point it will 
    be called periodically by the GAF as required. Returning 'true' from this function will 
    terminate the running genetic algorithm. It should take the following form.
</p>
<p>The signature of the TerminateFunction is shown below. The 
    method name is unimportant, but the signature is.</p>
<pre><code>private bool TerminateFunction(Population population, 
                                int currentGeneration, 
                                long currentEvaluation) 
{ 
    //determine criteria on which to terminate
    //...

    return result; 
}</code></pre>
<p>
    The function is then passed to the GAF when it is executed.
</p>
<pre><code>ga.Run(TerminateFunction);</code></pre>
<p>
    When the function is called by the GAF, it will pass the current generation number 
    and the number of evaluations that have occurred so far. The following example 
    Terminate Function would terminate the algorithm after 400 generations.
</p>

<pre><code>private bool TerminateFunction(Population population, 
                                int currentGeneration, 
                                long currentEvaluation) 
{ 
    //return true if 400 generations have been reached.
    return currentGeneration >= 400; 
}</code></pre>
<h2>Using a separate Assembly for Termination Functions</h2>
<p>
    An example of how to define the terminate function within a separate assembly
    can be found <a href="/gaf/section/505">here</a>.
</p>

<a href="/gaf/section/303" class="btn-u pull-right">Next ></a>

<script>

$(document).ready(function() {
  $('pre code').each(function(i, block) {
    hljs.highlightBlock(block);
  });
});

</script>
