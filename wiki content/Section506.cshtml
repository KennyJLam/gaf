<h2>Evaluating on a Network of Computers</h2>
<h3>Introduction</h3>

<p>This article describes how it is possible to perform the fitness evaluation on two or more separate networked computers 
	utilising the GAF Evaluation Server and GAF Service Discovery components.</p>
<p>All of the server side components for this article are contained in Docker images and are managed with Docker Compose. 
For details of installing Docker and Docker Compose, please see <a href="/gaf/section/7">Using the GAF Docker Images</a>.</p>

<p>To install a set of GAF Evaluation Servers please see article <a href="/gaf/section/603">Creating a GAF Evaluation Server</a></p>

<p><em>Please Note, previous examples of this approach used the GAF.Net namespace classes. From version 2.2.5 of the GAF the GAF.Net 
namespace has been deprecated. The network functionality for the GAF is now available in separate NuGet package, GAF.Network.</em></p>

<h3>Example Using Five Evaluation Servers</h3>

<p>In this example a total of five servers hosting the GAF Evaluation Server will be used. The machines (nodes) each have Docker and 
Docker Compose installed. See <a href="/gaf/section/6">Using the GAF Docker Images</a> for details.</p>
<p>The nodes in this example are defined as follows;</p>
<table class="table">
<tr><th>Host Name</th><th>IP Address</th><th>Function</th></tr>
<tr><td>D10</td><td>192.168.1.90</td><td>Consul (bootstrap) and GAF Evaluation Server</td></tr>
<tr><td>D11</td><td>192.168.1.91</td><td>Consul (join) and GAF Evaluation Server</td></tr>
<tr><td>D12</td><td>192.168.1.92</td><td>Consul (join) and GAF Evaluation Server</td></tr>
<tr><td>D13</td><td>192.168.1.93</td><td>Consul (join) and GAF Evaluation Server</td></tr>
<tr><td>D14</td><td>192.168.1.94</td><td>Consul (join) and GAF Evaluation Server</td></tr>
</table>

<h3>Networking the Travelling Salesman Example</h3>
<p>In this article, the example shown in <a href="/gaf/section/502">Solving the Travelling Salesman Problem</a> 
	has been modified to execute the evaluations on the five GAF Evaluation Servers.</p>

<p>For the GAF Evaluation Servers to perform an evaluation, the fitness function and associated helper methods and objects
	need to exist on each server.
To accomplish this, the Fitness Function is placed in a separate assembly and either copied manually to the server
or sent to the server automatically by the GAF.Network components. Details of how to create this assembly are shown 
in the article <a href="/gaf/section/602">Implementing GAF.Network.IRemoteFitness</a>.</p>

<h3>Network Components</h3>
<p>The example code below shows the the modified Travelling Saleman example code. The code includes the addtitional 
	<strong>NetWorkWrapper</strong> and <strong>ServiceDiscovery</strong> classes. These are provided by 
	GAF.Network and GAF.ServiceDiscovery NuGet packages respectively. The functionality that these packages
	provide is described in the section <a href="/gaf/section/6">The GAF Evaluation Server</a>.</p>

<p>The packages can be installed using the Package Manager console.</p>
<pre><code>PM&gt; Install-Package GAF.Network
PM&gt; Install-Package GAF.ServiceDiscovery</code></pre>

<h3>Example Code</h3>
<p>mThe following listing is a complete example of a GA that solves the travelling salesman problem using all five
of the GAF Evaluation Servers.</p>
<p><em>This code and the compiled assembly is avalaible via <a href="/gaf/section/5">Docker and BitBucket</a>.</em></p>

<pre><code>@Html.Action("LoadCodeFile", "Gaf", new { filename = "/Content/txt/gaf/506/Program.cs.txt" })</code></pre>

<script>

$(document).ready(function() {
  $('pre code').each(function(i, block) {
    hljs.highlightBlock(block);
  });
});

</script>