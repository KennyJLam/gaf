<h2>Getting Started with GAF Lab</h2>

<a href="/Content/img/gaf/802/gaflab1_large.png" target="_blank"><img class="pull-right img-responsive" src="/Content/img/gaf/8/gaflab.png" alt="Screenshot of the GAF Lab Application." ></a>
<h3>The Basics</h3>
<p>GAF Lab is a GUI application that uses the Genetic Algorithm Framework to run a genetic algorithm. It uses the normal GAF.dll
assembly that is available via Nuget or Bitbucket to run the GA, however, it takes control of the running GA in order that it can be monitored
and changed whilst it is running.</p>
<p>The aim is that GAF Lab can assist in the testing and evaluation of a proposed GA. GAF Lab can ease the process of determining suitable GA parameters,
monitoring diversity and convergence and investigating the population throughout the GA run.</p>
<h3>Consumer Functions</h3>
<p>GAF Lab can be used to run any GA that can be run using the GAF, however, before using GAF Lab it is important to understand the concept
of 'Consumer Functions'.</p>
<p>When working with the Genetic Algorithm Framework (GAF) without using GAF Lab, the consumer/developer provides the Fitness and Terminate functions and passes
these as delegates to the GAF. In addition an initial population is defined during 
initialisation of the GA. In order to use GAF Lab it is neccessary to implement these delegates and methods in a separate assembly so that these can be 
loaded into GAF Lab using the file menu. 
This assembly is referred to as the 'Consumer Functions' assembly. Creating a Consumer Functions assembly is a reasonably 
straightforward process and is described <a href="/gaf/section/803">here</a>. However, for this 'Getting Started' guide, the two
sample Consumer Functions assemblies supplied with GAF Lab, will be used.</p>

<h3>Binary F6 and Travelling Salesman Examples</h3>
<a href="/Content/img/gaf/802/fileopen.png" target="_blank"><img class="img-responsive shrink pull-left" src="/Content/img/gaf/802/fileopen.png" alt="Loading the Consumer Functions assembly." ></a>
<p>The product includes two Consumer Functions assemblies.</p>
<ul>
<li>GAF.ConsumerFunctions.BinaryF6.dll</li>
<li>GAF.ConsumerFunctions.TravellingSalesman.dll</li>
</ul>
<p>Creating a Consumer Functions assembly is described <a href="/gaf/section/803">here</a>.</p>

<p>These assemblies contain the Fitness function, Terminate function, initial population and a couple of methods that provide a custom display 
	at each generation. This assembly is loaded into GAF Lab using the File Menu.
</p>

<p class="clearfix"></p>
<h3>Genetic Operator Configuration</h3>
<a href="/Content/img/gaf/802/operators.png" target="_blank"><img class="img-responsive pull-right" width="400" src="/Content/img/gaf/802/operators.png" alt="Adjusting Genetic Operators." ></a>
<p>All of the standard genetic operators are shown in Tabs on the right hand side of the applications main window. Settings can be made to the operators at any point
before or after the GA has been started.</p>
<p>The meanings and effects of these parameters is described in the <a href="/gaf/section/4">Genetic Operators</a> section of the documentation.</p>
<p class="clearfix"></p>
<h3>Population Configuration</h3>
<a href="/Content/img/gaf/802/leftpane.png" target="_blank"><img class="img-responsive pull-left" width="160" src="/Content/img/gaf/802/leftpane.png" alt="Lefhand Control Panel." ></a>
<p>The population parameters, Re-Evaluate All, Linear Normalisation, and Evaluate in Parallel can all be configured using the left hand pane of the main applications window. 
The meanings and effects of these parameters is described in the <a href="/gaf/section/201">Population</a> section of the documentation.</p>
<h3>Start, Stop, Pause, Step and Resume</h3>
<p>Once the Consumer Functions have been loaded, the GA can be started and stopped from the left hand pane. In addition, the GA can be Paused,
	allowing the population to be inspected (see 'The Genotypic View'). The Step button steps the GA one generation at a time and the Resume button 
	causes the GA to continue running normally.
</p>
<p class="clearfix"></p>
<h3>Monitoring the GA</h3>
<p>The GA can be monitored whilst it is running. The Monitor pane shows some basic statistics and graphical indications of convergence and diversity.
</p>
<p>Where the chromosome in use is a binary string, <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank">hamming distance</a> is the primary measure
determining diversity and convergence. However, diversity and convergence based on Fitness is also shown (DiversityF and ConvergenceF) which works for all chromosome types.</p>
<p>As the the population converges the number of duplicate chromosomes can increase significantly, the panel shows the percentage and count of of duplicate chromosomes (based on value) that exist in the population.</p>
<p>The FitnesC9 indicator returns a value relating to the number of consecutive '9's that exist in the max fitness. For example a fitness of 0.999987654 
would return a C9 fitness of 4. This has been incuded as this measure has been used in some journal articles and text books.</p>
<p>The Distribution of Fitness display gives a visual representation of where the concentration of fitness values lie, within the fitness value range (0.0 - 1.0).</p>
<a href="/Content/img/gaf/802/gaflab1_large.png" target="_blank"><img class="img-responsive" src="/Content/img/gaf/802/gaflab1.png" alt="Monitor Pane." ></a>
<p class="clearfix"></p>
<h3>The Genotypic View</h3>
<p>This pane shows the population and is enabled when the GA is paused. This view will work for all types of chromosome including object based chromosomes.</p>
<a href="/Content/img/gaf/802/gaflab2_large.png" target="_blank"><img class="img-responsive" src="/Content/img/gaf/802/gaflab2.png" alt="Genotypic View." ></a>
<p class="clearfix"></p>
<h3>The Code Pane</h3>
<p>This pane shows the code that would be required to be used with the GAF (i.e. without GAF Lab) in order to implement the currently configured GA.
This pane is dynamic and changes as the various GA parameters are adjusted. Simply copy and paste this code into a code editor/IDE such
as Visual Studio or Xamrin Studio to recreate the GAF Lab configured GA in code.</p>
<a href="/Content/img/gaf/802/gaflab3_large.png" target="_blank"><img class="img-responsive" src="/Content/img/gaf/802/gaflab3.png" alt="Code Pane." ></a>
<p class="clearfix"></p>
<h3>The Output Pane</h3>
<p>The output pane shows exception messages and any logging messages that may be presented from the the GAF or GAF Lab itself. In addition, customised  messages
defined within the Consumer Functions assembly will be displayed here at each generation and at the end of the run. See <a href="/gaf/section/803">Creatiing a Consumer Functions Assembly</a> for details.</p>
<a href="/Content/img/gaf/802/output.png" target="_blank"><img class="img-responsive" src="/Content/img/gaf/802/output.png" alt="Output Pane." ></a>

<p class="clearfix"></p>
<a href="/gaf/section/803" class="btn-u pull-right">Next ></a>

<script>

$(document).ready(function() {
  $('pre code').each(function(i, block) {
    hljs.highlightBlock(block);
  });
});

</script>
