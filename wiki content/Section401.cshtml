<h2>Crossover</h2>
<p>
    The Crossover class has many overloaded constructors, the following constructor
    represents the most comprehensive. Some of the parameters can be changed using
    properties of the class.
</p>

<pre><code>public Crossover (double crossOverProbability, 
                    bool allowDuplicates, 
                    CrossoverType crossoverType, 
                    ReplacementMethod replacementMethod)
		
</code></pre>

<h3>Crossover Probability</h3>
<p>
    The crossover probability is simply a value between 0 and 1 that represents
    the probability of parents crossing over to produce children. A value of 1 
    means that all selected parents will crossover and create children. A value of 
    0.85 means that 85% will be crossed over and the remainder of parents will be 
    pass through untouched to the new generation. When experimenting with 
    crossover probability, a good starting point would be somewhere between 0.65 
    and 1.
</p>
<h3>Duplicate Handling</h3>
<p>
    The Crossover Operator can be configured to not allow duplicate solutions within 
    the population. 
    In some rare cases, this can be an advantage, however, this mode of operation is
    computationally expensive. In addition, a population without duplicates 
    may prevent the GA from converging to an appropriate solution. In most situations
    the <em>allowDuplicates</em> parameter should be set to <em>true</em>. This is the 
    default value.
</p>

<h3>Crossover Type</h3>
<p>
    The crossover operator within the GAF can handle one of three types of crossover. Singe or double point crossover.
</p>
<dl>
    <dt>Single Point</dt>
    <dd>A single random point is selected for each parent chromosome and one part is swapped between them.</dd>
    <dt>Double Point</dt>
    <dd>Two points are selected to determine a centre section in each parent, this is swapped between them.</dd>
    <dt>Double Point Ordered</dt>
    <dd>
        A single parent is used to create a child however the order of a second parent determines how the 
        chromosome is arranged. This method only works with chromosomes that have a unique set of genes (by Value).
        For this to be usable custom object based genes required and the Equals method should be overriden within the gene 
        definition to return a value.
    </dd>
</dl>

<h3>Replacement Method</h3>
<p>

</p>
<dl>
    <dt>Generational Replacement</dt>
    <dd>New solutions (Children) are created from existing solutions (Parents) and a new population is created.</dd>
    <dt>Delete Last</dt>
    <dd>Children created are used to replace the the weakest solutions in the current population.</dd>
</dl>

<p>The example code below creates a double point crossover operator with a crossover 
    probability of 0.85 that allows duplicates.
</p>
<pre><code>var crossover = new Crossover(0.85, 
                                true, 
                                CrossoverType.DoublePoint, 
                                ReplacementMethod.GenerationalReplacement
                              );
</code></pre>
<a href="/gaf/section/402" class="btn-u pull-right">Next ></a>

<script>

$(document).ready(function() {
  $('pre code').each(function(i, block) {
    hljs.highlightBlock(block);
  });
});

</script>